<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <IsFacadeAssembly Condition="'$(IsFacadeAssembly)'=='' AND ($(MSBuildProjectName.EndsWith('.Facade')))">true</IsFacadeAssembly>
  </PropertyGroup>
  
  <PropertyGroup Condition="'$(IsFacadeAssembly)'=='true'">
    <IsPartialFacadeAssembly>true</IsPartialFacadeAssembly>
    <GenFacadesIgnoreMissingTypes>true</GenFacadesIgnoreMissingTypes>
    <!--Don't produce or publish symbols for Facade assemblies.-->
    <PublishWindowsPdb>false</PublishWindowsPdb>
    <IsPackable>true</IsPackable>
    <!-- GenFacades requires a PDB -->
    <DebugType>portable</DebugType>
  </PropertyGroup>

  <ItemGroup Condition="'$(IsPartialFacadeAssembly)'=='true'">
    <PackageReference Include="Microsoft.DotNet.GenFacades" Version="$(MicrosoftDotNetGenFacadesPackageVersion)" PrivateAssets="All" />
  </ItemGroup>

  <!--This is where we tell GenFacades what Ref assembly to look for.-->
  <Target Condition="'$(IsPartialFacadeAssembly)'=='true'" Name="ResolveMatchingContract" AfterTargets="ResolvePackageDependenciesForBuild">
    <ItemGroup>
      <ProjectReference Include="..\ref\$(AssemblyName).Ref.csproj">
        <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
        <OutputItemType>ResolvedMatchingContract</OutputItemType>
      </ProjectReference>
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificBuildOutput);AddFacadeToPackage;AddHarvestedFilesToPackage</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>
  
  <Target Condition="'$(IsPartialFacadeAssembly)'=='true'" Name="AddFacadeToPackage" DependsOnTargets="ResolveReferences">
    <ItemGroup>
      <TfmSpecificPackageFile Include="@(ResolvedMatchingContract)" PackagePath="ref/$(TargetFramework)" />
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <HarvestProject>$(RepoRoot)\src\harvest\harvest.csproj</HarvestProject>
  </PropertyGroup>

  <Target Name="_GetPathToHarvest">
    <MSBuild Projects="$(HarvestProject)"
             Targets="GetPathToHarvest"
             Properties="PackageToHarvest=$(PackageId)">
      <Output TaskParameter="TargetOutputs" PropertyName="_pathToHarvest"/>
    </MSBuild>
  </Target>
  
  <Target Name="AddHarvestedFilesToPackage"
          DependsOnTargets="_GetPathToHarvest"
          Inputs="%(HarvestIncludePaths.Identity)"
          Outputs="unused">
    <ItemGroup>
      <_harvestedItems Include="$(_pathToHarvest)\%(HarvestIncludePaths.Identity)\*.*" PackagePath="%(HarvestIncludePaths.Identity)" />
      <TfmSpecificPackageFile Include="@(_harvestedItems)" />
    </ItemGroup>
    <Error Condition="'@(_harvestedItems)' == ''" Text="Could not harvest any files from $(_pathToHarvest)\%(HarvestIncludePaths.Identity) "/>
  </Target>
  
  <PropertyGroup Condition="'$(IsPartialFacadeAssembly)'=='true'">
    <ContinuePackingAfterGeneratingNuspec>false</ContinuePackingAfterGeneratingNuspec>
  </PropertyGroup>
  <Target Name="TestSpec" Condition="'$(IsPartialFacadeAssembly)'=='true'" AfterTargets="GenerateNuSpec">
    <PropertyGroup>
      <ContinuePackingAfterGeneratingNuspec>true</ContinuePackingAfterGeneratingNuspec>
      <OriginalNuSpec>$(NuspecOutputAbsolutePath)$(PackageId).$(PackageVersion).nuspec</OriginalNuSpec>
      <NuspecFileAbsolutePath>$(NuspecOutputAbsolutePath)$(PackageId).$(PackageVersion).modified.nuspec</NuspecFileAbsolutePath>
      <_removeLine><![CDATA[<licenseUrl>https://licenses.nuget.org/MIT</licenseUrl>]]></_removeLine>
    </PropertyGroup>

    <!-- TODO Replace with task that can insert dependencies
    
          Input: 
          OldNuspec: $(_pathToHarvest)\$(PackageId).nuspec
          NewNuspec: $(OriginalNuSpec)
          OutputNuSpec: $(NuspecFileAbsolutePath)
          
          Load NewNuspec. -> nn
          Load OldNuspec. -> on
          HashSet<string> newGroups = nn.DependencyGroups.Select(dg => dg.TargetFramework)
          
          foreach( oldDg in on.DependencyGroups.Where(dg => !newGroups.Contains(dg.TargetFramework))
            nn.DependencyGroups.Add(oldDg)
    
    -->
    <WriteLinesToFile File="$(NuspecFileAbsolutePath)"
                      Lines="$([System.IO.File]::ReadAllText('$(OriginalNuSpec)').Replace('$(_removeLine)', ''))"
                      Overwrite="true"/>
    <PackTask PackItem="$(PackProjectInputFile)"
              SymbolPackageFormat="$(SymbolPackageFormat)"
              ContinuePackingAfterGeneratingNuspec="$(ContinuePackingAfterGeneratingNuspec)"
              NuspecFile="$(NuspecFileAbsolutePath)"
              PackageOutputPath="$(PackageOutputAbsolutePath)"
              NuspecOutputPath="$(NuspecOutputAbsolutePath)"
              NoWarn="$(NoWarn)"
              WarningsAsErrors="$(WarningsAsErrors)"
              TreatWarningsAsErrors="$(TreatWarningsAsErrors)" />
  </Target>
</Project>
